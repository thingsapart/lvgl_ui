/*
 * AUTO-GENERATED by generate_dynamic_lvgl_dispatch.py.
 * DO NOT EDIT MANUALLY.
 */
#ifndef LVGL_DISPATCH_H
#define LVGL_DISPATCH_H

#ifdef __cplusplus
extern "C" {
#endif

#include "lvgl.h"
#include <stdio.h>
#include <stdlib.h>

// Forward declarations for required structs
struct IRNode;
struct ApiSpec;

typedef struct _lv_obj_t _lv_obj_t;

// --- Object Registry ---
// A simple dynamic registry to map string IDs to created LVGL objects.
void obj_registry_init(void);
void obj_registry_add(const char* id, void* obj);
char *obj_registry_add_str(const char *s);
void* obj_registry_get(const char* id);
void obj_registry_deinit(void);

// --- Dynamic Dispatcher ---
// Calls an LVGL function by name, with arguments provided as an array of IR nodes.
// Added ApiSpec* spec argument for context-aware parsing (e.g., enums by string name).
lv_obj_t* dynamic_lvgl_call_ir(const char* func_name, void* target_obj, struct IRNode** ir_args, int arg_count, struct ApiSpec* spec);

#ifdef __cplusplus
}
#endif

#endif // LVGL_DISPATCH_H
