/*
 * AUTO-GENERATED by generate_dynamic_lvgl_dispatch.py.
 * DO NOT EDIT MANUALLY.
 */
#ifndef DYNAMIC_LVGL_H
#define DYNAMIC_LVGL_H

#ifdef __cplusplus
extern "C" {
#endif

#include "lvgl.h"
#include <stdio.h>
#include <stdlib.h>

#include "api_spec.h"

typedef struct IRNode IRNode;
struct ApiSpec; /* Forward declaration for ApiSpec pointer usage */

// --- Object Registry ---
// A simple dynamic registry to map string IDs to created LVGL objects (widgets, styles, etc.).
void obj_registry_init(void);
void obj_registry_add(const char* id, void* obj);
char *obj_registry_add_str(const char *);
void* obj_registry_get(const char* id);
void obj_registry_deinit(void);

// --- Dynamic Dispatcher ---
// Calls an LVGL function by name, with arguments provided as an array of IR nodes.
// The renderer is responsible for resolving complex IR expressions (like context vars)
// into simpler, self-contained IR nodes (literals, registry refs) before calling.
// Added ApiSpec* spec argument for context-aware parsing (e.g. enums by string name)
lv_obj_t* dynamic_lvgl_call_ir(const char* func_name, void* target_obj, IRNode** ir_args, int arg_count, struct ApiSpec* spec);

#ifdef __cplusplus
}
#endif

#endif // DYNAMIC_LVGL_H
