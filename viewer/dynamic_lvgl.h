/*
 * AUTO-GENERATED by the LVGL API parser script.
 * DO NOT EDIT MANUALLY.
 */
#ifndef DYNAMIC_LVGL_H
#define DYNAMIC_LVGL_H

#ifdef __cplusplus
extern "C" {
#endif

#include "lvgl.h"
#include "cJSON.h"

/**
 * @brief Initializes the object registry. Call this once.
 */
void obj_registry_init(void);

/**
 * @brief Adds a named object to the registry.
 * @param id The string ID for the object.
 * @param obj The lv_obj_t pointer.
 */
void obj_registry_add(const char* id, void* obj);

/**
 * @brief Retrieves an object from the registry by its ID.
 * @param id The string ID of the object.
 * @return The pointer or NULL if not found.
 */
void* obj_registry_get(const char* id);

/**
 * @brief Cleans up the object registry.
 */
void obj_registry_deinit(void);


/**
 * @brief The main entry point to dynamically call an LVGL function.
 *
 * @param func_name The name of the LVGL function to call (e.g., "lv_obj_set_width").
 * @param target_obj The target object for the function. For creation functions (e.g., lv_label_create),
 *                   this is the parent. For methods, this is the object instance. Can be NULL for
 *                   functions without a target object (e.g., lv_pct).
 * @param args A cJSON array containing the arguments for the function. For a function like
 *             lv_obj_set_width(obj, 100), 'args' would be a cJSON array with one number: [100].
 * @return A new lv_obj_t* if the called function was an object creator, otherwise NULL.
 *         Note: For non-object returns, the value is discarded and NULL is returned.
 */
lv_obj_t* dynamic_lvgl_call(const char* func_name, void* target_obj, cJSON* args);

/**
 * @brief Unmarshals a JSON value to an enum. This function must be implemented by the user.
 *        It should contain a series of if-else checks or a map to convert the string
 *        `expected_enum_type_for_arg` into a call to a specific enum parser.
 *
 * @param value The cJSON value (should be a string or a number).
 * @param expected_enum_type_for_arg A string naming the enum type, e.g., "lv_align_t".
 * @return The integer value of the enum.
 */
int unmarshal_value(cJSON* value, const char* expected_enum_type_for_arg);

#ifdef __cplusplus
} /*extern "C"*/
#endif

#endif // DYNAMIC_LVGL_H
