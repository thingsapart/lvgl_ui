#include "lvgl.h"
#include <stdio.h> // For NULL if not already included

// Assume parent_obj and another_label are declared globally or passed appropriately
// lv_obj_t* parent_obj;
// lv_obj_t* another_label; // Not used in this version

lv_obj_t* my_label;

// Function to set up the UI elements
void setup_ui(lv_obj_t* parent_obj) {
    // Main object creation for "my_label"
    my_label = lv_label_create(parent_obj);

    // Add to pointer registry for "@my_label"
    // Assuming ui_registry is the global registry instance name
    registry_add_pointer(ui_registry, my_label, "my_label", "label");

    // Properties for my_label (from "properties" sub-object)
    // process_properties will focus on the "properties" sub-object.
    // The "with" blocks, being siblings to the "properties" key, will be ignored
    // by the current logic of process_properties.
    lv_label_set_text(my_label, "Main Label Text");
}

/*
// Minimal main for testing if needed
int main(void) {
    lv_init();
    // Dummy screen
    lv_obj_t* screen = lv_obj_create(NULL);
    lv_disp_load_scr(screen);

    // Initialize ui_registry if it's a pointer that needs allocation
    // ui_registry = registry_create(); // Or however it's initialized

    setup_ui(screen); // Pass screen as parent_obj

    // Example of how to clean up if registry was created here
    // if (ui_registry) registry_free(ui_registry);

    // while(1) {
    //     lv_timer_handler();
    //     // usleep(5000);
    // }
    return 0;
}
*/
