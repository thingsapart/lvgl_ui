#include "lvgl.h"
#include <stdio.h> // For NULL if not already included

// Assume parent_obj and another_label are declared globally or passed appropriately
// For the purpose of this test, we might need dummy declarations if the test harness compiles this standalone.
// However, typically these tests focus on the generated block within a larger context.
// Let's assume they are available.
// lv_obj_t* parent_obj; // Example external declaration
// lv_obj_t* another_label; // Example external declaration

lv_obj_t* my_label;

// Unique variable names will be generated by the tool.
// Based on current understanding of generate_unique_var_name:
// 1st with (lv_label_create): likely label_0
// 2nd with (lv_obj_get_child): likely obj_1 (or similar if type is inferred differently)

void setup_ui(lv_obj_t* parent_obj) {
    // Main object creation
    my_label = lv_label_create(parent_obj);

    // First 'with' block
    lv_obj_t* label_0 = lv_label_create(parent_obj);
    lv_label_set_text(label_0, "First With");

    // Second 'with' block
    lv_obj_t* obj_1 = lv_obj_get_child(parent_obj, 0);
    lv_obj_set_align(obj_1, LV_ALIGN_CENTER);

    // Third 'with' block (operates on an assumed existing 'another_label')
    // Assuming another_label is already initialized appropriately elsewhere.
    // If another_label is also a label:
    lv_label_set_text(another_label, "Third With");
    // If it's a generic obj and text is not a direct property, this might differ,
    // but "text" for a label usually uses lv_label_set_text.

    // Properties for my_label
    lv_label_set_text(my_label, "Main Label Text");
}

// Minimal main for potential standalone compilation by test runner
// int main(void) {
//     lv_init();
//     // Create a dummy parent screen for testing if necessary
//     lv_obj_t* screen = lv_obj_create(NULL);
//     lv_disp_load_scr(screen);
//
//     // Dummy another_label for testing
//     another_label = lv_label_create(screen);
//
//     setup_ui(screen); // Pass the dummy screen as parent_obj
//
//     // Minimal run loop or exit for testing
//     // while(1) {
//     //     lv_timer_handler();
//     //     // usleep(5000);
//     // }
//     return 0;
// }
