#include "lvgl.h"
#include <stdio.h> // For NULL if not already included

// Assume parent_obj and another_label are defined elsewhere (e.g. global or passed in)
// lv_obj_t* parent_obj;
// lv_obj_t* another_label; // Assumed to be lv_label_t* or compatible for lv_label_set_text

lv_obj_t* my_label; // Global declaration for the main object

// Function to set up the UI elements
void setup_ui(lv_obj_t* parent_obj) {
    // Node object creation for "my_label"
    // The type "label" is known, so lv_label_create is used.
    my_label = lv_label_create(parent_obj);

    // Add to pointer registry for "@my_label"
    // Assuming ui_registry is the global registry instance name
    registry_add_pointer(ui_registry, my_label, "my_label", "label");

    // Processing properties and 'with' blocks for "my_label" in order:

    // "//comment_before_first_with": "This should appear before the first 'with' block's generated code."
    /* This should appear before the first 'with' block's generated code. */

    // First "with" block:
    // 'obj' is a call, so a new temporary variable 'label_0' (or similar) will be created.
    lv_obj_t* label_0 = lv_label_create(parent_obj);
    lv_label_set_text(label_0, "First With");

    // "text": "Main Label Text After First With"
    lv_label_set_text(my_label, "Main Label Text After First With");

    // "//comment_between_withs": "This should appear between the first and second 'with' block's code."
    /* This should appear between the first and second 'with' block's code. */

    // Second "with" block:
    // 'obj' is a call, so a new temporary variable 'obj_1' (or similar) will be created.
    lv_obj_t* obj_1 = lv_obj_get_child(parent_obj, 0);
    lv_obj_set_align(obj_1, LV_ALIGN_CENTER);

    // "user_data": "Test User Data"
    // Assuming user_data for a label is set using lv_obj_set_user_data
    // and unmarshal_value for "Test User Data" results in a string literal.
    lv_obj_set_user_data(my_label, "Test User Data");

    // Third "with" block:
    // 'obj' is "@another_label". process_single_with_block will use 'another_label' directly.
    // No new variable is created for 'another_label' within process_single_with_block.
    lv_label_set_text(another_label, "Third With");

    // "//comment_after_all_withs": "This should appear after all 'with' blocks and properties."
    /* This should appear after all 'with' blocks and properties. */
}

/*
// Minimal main for testing if needed (usually not part of .expected file directly)
int main(void) {
    lv_init();
    // Dummy screen
    lv_obj_t* screen = lv_obj_create(NULL);
    lv_disp_load_scr(screen);

    // Dummy another_label for the test case
    // Ensure it's created before setup_ui is called if setup_ui uses it.
    another_label = lv_label_create(screen);
    // Initialize ui_registry if it's a pointer that needs allocation
    // ui_registry = registry_create(); // Or however it's initialized

    setup_ui(screen); // Pass screen as parent_obj

    // Example of how to clean up if registry was created here
    // if (ui_registry) registry_free(ui_registry);

    while(1) {
        lv_timer_handler();
        // usleep(5000); // From LVGL examples, not strictly needed for test logic
    }
    return 0;
}
*/
