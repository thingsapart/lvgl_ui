DEBUG_PRINT: unmarshal_value: String 'Initial Text' falling back to IR_EXPR_LITERAL_STRING
DEBUG_PRINT: process_single_with_block: START with_node: {"obj":"@l_test_label_for_nulls","do":{"text":null,"text_color":null,"text_opa":null,"text_font":null}}, target: dummy_with_1, declare: 1, hint: obj
DEBUG_PRINT: process_single_with_block: obj_json from with_node: "@l_test_label_for_nulls"
DEBUG_PRINT: process_single_with_block: obj_expr unmarshalled to IR type: IR_EXPR_VARIABLE for target dummy_with_1
DEBUG_PRINT: Using type 'label' (from obj_expr or already specific hint) for explicit target 'dummy_with_1' (node_widget_type_hint was 'obj').
DEBUG_PRINT: process_single_with_block: Declaring var 'dummy_with_1' with type 'lv_obj_t*'.
DEBUG_PRINT: process_single_with_block: final target_c_var_name: 'dummy_with_1', temp_var_c_type: 'lv_obj_t*' for original target dummy_with_1
DEBUG_PRINT: process_single_with_block: START with_node: {"obj":"@s_test_style_for_nulls","do":{"bg_color":null,"border_width":null,"outline_opa":null,"shadow_color":null}}, target: dummy_with_2, declare: 1, hint: obj
DEBUG_PRINT: process_single_with_block: obj_json from with_node: "@s_test_style_for_nulls"
DEBUG_PRINT: process_single_with_block: obj_expr unmarshalled to IR type: UNKNOWN_EXPR_TYPE for target dummy_with_2
DEBUG_PRINT: Using type 'style' (from obj_expr or already specific hint) for explicit target 'dummy_with_2' (node_widget_type_hint was 'obj').
DEBUG_PRINT: process_single_with_block: Declaring var 'dummy_with_2' with type 'lv_obj_t*'.
DEBUG_PRINT: process_single_with_block: final target_c_var_name: 'dummy_with_2', temp_var_c_type: 'lv_obj_t*' for original target dummy_with_2
// Code generated by LVGL UI Generator

#include "lvgl.h"

// Forward declaration for any registered C pointers you might have from your application.
// Example: extern const lv_font_t my_custom_font;
void create_ui(lv_obj_t* parent) {
    {
        lv_style_t* s_test_style_for_nulls = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (s_test_style_for_nulls != NULL) {
            memset(s_test_style_for_nulls, 0, sizeof(lv_style_t));
            lv_style_init(s_test_style_for_nulls);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "s_test_style_for_nulls", "lv_style_t");
        }
    }
    {
        lv_obj_t* l_test_label_for_nulls = lv_label_create(parent);
        lv_label_set_text(l_test_label_for_nulls, "Initial Text");
    }
    {
        // // Node is a 'with' assignment target. Allocation skipped for now.
        lv_obj_t* dummy_with_1 = l_test_label_for_nulls;
        lv_label_set_text(dummy_with_1, NULL);
        lv_obj_set_style_text_color(dummy_with_1, lv_color_hex(0));
        lv_obj_set_style_text_opa(dummy_with_1, 0);
        lv_obj_set_style_text_font(dummy_with_1, NULL);
    }
    {
        // // Node is a 'with' assignment target. Allocation skipped for now.
        lv_obj_t* dummy_with_2 = &s_test_style_for_nulls;
        lv_style_set_bg_color(dummy_with_2, lv_color_hex(0));
        lv_style_set_border_width(dummy_with_2, 0);
        lv_style_set_outline_opa(dummy_with_2, 0);
        lv_style_set_shadow_color(dummy_with_2, lv_color_hex(0));
    }
}
