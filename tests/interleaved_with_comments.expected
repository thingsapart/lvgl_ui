// Code generated by LVGL UI Generator

#include "lvgl.h"
#include <stdio.h> // For NULL if not already included by other headers
#include <stdlib.h>
#include <string.h>

// Global variable for the style defined in JSON
lv_style_t* style_0; // For @container

// Global variable for the tileview from "id": "@main_tileview"
lv_obj_t* main_tileview;

// Assuming ui_registry is a global or accessible variable
// extern Registry* ui_registry;

void setup_ui(lv_obj_t* parent) {
    // Style creation for "@container"
    // In a real scenario, style_0 would be the C variable for @container.
    // If @container is an ID, registry_get_pointer(ui_registry, "container") might be used.
    // For this test, we assume style_0 is directly the C var after its definition.
    style_0 = (lv_style_t*)malloc(sizeof(lv_style_t));
    if (style_0 != NULL) {
        memset(style_0, 0, sizeof(lv_style_t));
        lv_style_init(style_0);
    } else {
        fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "style_0", "lv_style_t");
    }
    registry_add_pointer(ui_registry, style_0, "container", "style");
    // container_style = style_0; //This line from prompt is redundant if style_0 is used directly. Let's use style_0.

    // Component @jog_view is defined (no code generated here for definition)

    // Tileview creation and property processing
    main_tileview = lv_tileview_create(parent);
    registry_add_pointer(ui_registry, main_tileview, "main_tileview", "tileview");

    lv_obj_add_style(main_tileview, style_0, 0); // Use style_0 for @container
    lv_obj_set_size(main_tileview, lv_pct(100), lv_pct(100));
    lv_obj_set_style_pad_row(main_tileview, 0, 0);
    lv_obj_set_style_pad_column(main_tileview, 0, 0);

    // "//": "First WITH (tile1)"
    /* First WITH (tile1) */
    lv_obj_t* tile_obj_0 = lv_tileview_add_tile(main_tileview, 0, 0, LV_DIR_RIGHT);
    // "do": null

    // "//": "Second WITH (tile2)"
    /* Second WITH (tile2) */
    lv_obj_t* tile_obj_1 = lv_tileview_add_tile(main_tileview, 0, 0, LV_DIR_RIGHT);
    // "do" for second "with" (on tile_obj_1):
    // "//": "Second DO on tile2"
    /* Second DO on tile2 */
    lv_obj_add_style(tile_obj_1, style_0, 0); // Use style_0 for @container
    lv_obj_set_style_bg_color(tile_obj_1, lv_color_hex(0xff0000), 0);
    lv_obj_set_style_bg_opa(tile_obj_1, LV_OPA_COVER, 0);
    // Children of second "with.do", parented to tile_obj_1:
    {
        lv_obj_t* label_on_tile2 = lv_label_create(tile_obj_1);
        registry_add_pointer(ui_registry, label_on_tile2, "label_on_tile2", "label");
        lv_obj_center(label_on_tile2);
        lv_label_set_text(label_on_tile2, "Scroll right");
    }

    // "//": "Third WITH (tile3)"
    /* Third WITH (tile3) */
    lv_obj_t* tile_obj_2 = lv_tileview_add_tile(main_tileview, 1, 0, LV_DIR_LEFT);
    // "do" for third "with" (on tile_obj_2):
    // "//": "Third DO on tile3"
    /* Third DO on tile3 */
    lv_obj_add_style(tile_obj_2, style_0, 0); // Use style_0 for @container
    // Children of third "with.do", parented to tile_obj_2:
    {
        // Processing "use-view", "id": "@jog_view", "named": "jog_view_on_tile3"
        lv_obj_t* jog_view_on_tile3 = lv_obj_create(tile_obj_2);
        registry_add_generated_var(ui_registry, "jog_view_on_tile3", "jog_view_on_tile3");
        registry_add_pointer(ui_registry, jog_view_on_tile3, "jog_view", "use-view");

        // Applying properties from @jog_view's root to jog_view_on_tile3
        lv_obj_set_style_bg_color(jog_view_on_tile3, lv_color_hex(0x00ff00), 0);
        lv_obj_set_size(jog_view_on_tile3, lv_pct(100), lv_pct(100));
        // Children of @jog_view's root, parented to jog_view_on_tile3
        {
            // Name will be generated e.g. label_0, label_1 etc. depending on var_counter
            lv_obj_t* label_0 = lv_label_create(jog_view_on_tile3);
            lv_label_set_text(label_0, "TEST");
        }
    }
}
