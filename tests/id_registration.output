DEBUG_PRINT: unmarshal_value: String 'Registered Child' falling back to IR_EXPR_LITERAL_STRING
DEBUG_PRINT: unmarshal_value: String 'Inside registered component' falling back to IR_EXPR_LITERAL_STRING
// Code generated by LVGL UI Generator

#include "lvgl.h"

// Forward declaration for any registered C pointers you might have from your application.
// Example: extern const lv_font_t my_custom_font;
void create_ui(lv_obj_t* parent) {
    {
        lv_obj_t* obj_registered_1 = lv_obj_create(parent);
        lv_obj_set_style_width(obj_registered_1, 100);
        lv_obj_set_style_height(obj_registered_1, 50);
        {
            lv_obj_t* l_child_for_reg = lv_label_create(obj_registered_1);
            lv_label_set_text(l_child_for_reg, "Registered Child");
            registry_add_pointer(ui_registry, l_child_for_reg, "my_child_label", "label");
        }
        registry_add_pointer(ui_registry, obj_registered_1, "my_registered_object_1", "obj");
    }
    {
        lv_style_t* s_registered_style_1 = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (s_registered_style_1 != NULL) {
            memset(s_registered_style_1, 0, sizeof(lv_style_t));
            lv_style_init(s_registered_style_1);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "s_registered_style_1", "lv_style_t");
        }
        lv_style_set_bg_color(s_registered_style_1, lv_color_hex(0x123456));
        registry_add_pointer(ui_registry, s_registered_style_1, "my_registered_style_1", "style");
    }
    {
        lv_obj_t* arc_registered = lv_arc_create(parent);
        lv_obj_add_style(arc_registered, &s_registered_style_1, 0);
        lv_arc_set_start_angle(arc_registered, 0);
        lv_arc_set_end_angle(arc_registered, 270);
        registry_add_pointer(ui_registry, arc_registered, "my_arc_using_registered_style", "arc");
    }
    {
        {
            lv_obj_t* uv_instance_reg_comp = lv_obj_create(parent);
            {
                lv_obj_t* label_0 = lv_label_create(uv_instance_reg_comp);
                lv_label_set_text(label_0, "Inside registered component");
            }
        }
        // Using the registered component, its instance should also be identifiable if needed
    }
}
