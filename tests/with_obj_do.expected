Info: ID 'obj_container_with' not found in registry, treating as direct variable name.
Warning: Property 'text' for object type 'obj' (C var 'with_func_call_obj_modifier') not found in API spec. Skipping.
// Code generated by LVGL UI Generator

#include "lvgl.h"

// Forward declaration for any registered C pointers you might have from your application.
// Example: extern const lv_font_t my_custom_font;
void create_ui(lv_obj_t* parent) {
    {
        lv_style_t* s_style_with = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (s_style_with != NULL) {
            memset(s_style_with, 0, sizeof(lv_style_t));
            lv_style_init(s_style_with);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "s_style_with", "lv_style_t");
        }
        lv_style_set_bg_color(s_style_with, lv_color_hex(0xFF0000));
        lv_style_set_text_color(s_style_with, lv_color_hex(0x00FF00));
        registry_add_pointer(ui_registry, s_style_with, "style_for_with_test", "style");
    }
    {
        lv_obj_t* l_label_with = lv_label_create(parent);
        lv_label_set_text(l_label_with, "Initial Text for With");
        lv_obj_set_style_x(l_label_with, 10);
        lv_obj_set_style_y(l_label_with, 10);
        registry_add_pointer(ui_registry, l_label_with, "label_for_with_test", "label");
    }
    {
        lv_obj_t* obj_container_with = lv_obj_create(parent);
        {
            lv_obj_t* l_target_1 = lv_label_create(obj_container_with);
            lv_label_set_text(l_target_1, "Target 1");
            registry_add_pointer(ui_registry, l_target_1, "target_label_1", "label");
        }
        {
            lv_obj_t* b_target_1 = lv_button_create(obj_container_with);
            registry_add_pointer(ui_registry, b_target_1, "target_button_1", "button");
        }
        registry_add_pointer(ui_registry, obj_container_with, "container_for_with", "obj");
    }
    {
        // // Node is a 'with' assignment target. Processing 'with' blocks for assignment.
        lv_style_t* with_style_applier = &s_style_with;
        {
            lv_style_set_bg_opa(with_style_applier, 255);
            lv_style_set_radius(with_style_applier, 5);
            lv_style_set_border_width(with_style_applier, 0);
        }
    }
    {
        // // Node is a 'with' assignment target. Processing 'with' blocks for assignment.
        lv_obj_t* with_label_modifier = l_label_with;
        {
            lv_label_set_text(with_label_modifier, "Updated Text via With");
            lv_label_set_long_mode(with_label_modifier, "SCROLL_CIRCULAR");
            lv_obj_set_style_align(with_label_modifier, "CENTER");
            lv_obj_set_style_x(with_label_modifier, 0);
        }
    }
    {
        // // Node is a 'with' assignment target. Processing 'with' blocks for assignment.
        lv_obj_t* with_button_in_container_modifier = b_target_1;
        {
            lv_obj_set_style_width(with_button_in_container_modifier, 100);
            lv_obj_set_style_height(with_button_in_container_modifier, 50);
            lv_obj_set_style_align(with_button_in_container_modifier, "TOP_LEFT");
        }
    }
    {
        // // Node is a 'with' assignment target. Processing 'with' blocks for assignment.
        lv_obj_t* with_null_do = l_label_with;
    }
    {
        // // Node is a 'with' assignment target. Processing 'with' blocks for assignment.
        lv_obj_t* with_empty_do = l_label_with;
        {
        }
    }
    {
        // // Node is a 'with' assignment target. Processing 'with' blocks for assignment.
        lv_obj_t* with_func_call_obj_modifier = lv_obj_get_child(obj_container_with, 0);
        {
            lv_obj_set_style_align(with_func_call_obj_modifier, "BOTTOM_MID");
            lv_obj_set_style_width(with_func_call_obj_modifier, 150);
        }
    }
}
