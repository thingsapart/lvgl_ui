# CNC data-binding.
- type: data-binding
  state:
    # -- Machine State --
    - time: 0.0
    - machine_mode: [string, "IDLE"] # IDLE, AUTO, JOG, MDI, HOMING, ALARM
    - program_running: false
    - program_paused: false
    - spindle_on: false
    - coolant_on: false
    - homing_axis_x: false # True if X axis homing is in progress
    - homing_axis_y: false # True if Y axis homing is in progress
    - homing_axis_z: false # True if Z axis homing is in progress
    - x_is_homed: false
    - y_is_homed: false
    - z_is_homed: false

    # -- Step --
    - jog_step_xy: [float, 1.0]
    - jog_step_z: [float, 1.0]

    # -- Program Execution --
    - program_elapsed_time: 0.0
    - program_total_time: 30.0 # Simulate a 30-second program

    # -- Machine Absolute Position (G53) - INTERNAL USE --
    - pos_x: 10.0
    - pos_y: 15.0
    - pos_z: 50.0

    # -- Work Coordinate Systems (WCS) --
    - wcs_name: [string, "G54"] # Active WCS
    - wcs54_x_zero: 250.5
    - wcs54_y_zero: 175.2
    - wcs54_z_zero: 100.0
    - wcs55_x_zero: 450.0
    - wcs55_y_zero: 175.2
    - wcs55_z_zero: 120.5

    # -- Probing Geometry (Defines the imaginary part to probe) --
    - probe_stock_min_x: 45.5
    - probe_stock_max_x: 180.5
    - probe_stock_min_y: -69.75
    - probe_stock_max_y: 30.25
    - probe_stock_min_z: 0.0
    - probe_stock_max_z: 35.0

    # -- Overrides --
    - jog_speed: 10.0
    - feed_override: 1.0
    - speed_override: 1.0
    - spindle_rpm: 0.0

    # -------------------
    # -- DERIVED STATE --
    # -------------------
    - program_status:
        derived_expr:
          case:
            - [[==, machine_mode, "HOMING"], "HOMING..."]
            - [program_paused, "PAUSED"]
            - [program_running, "RUNNING"]
            - [spindle_on, "SPINDLE ON"]
            - [true, "IDLE"]

    - program_progress:
        derived_expr:
          [clamp, [mul, [div, program_elapsed_time, program_total_time], 100], 0, 100]

    # -- Display Positions (Show 9999.99 if not homed) --
    - display_pos_x: { derived_expr: { case: [[x_is_homed, pos_x], [true, 9999.99]] } }
    - display_pos_y: { derived_expr: { case: [[y_is_homed, pos_y], [true, 9999.99]] } }
    - display_pos_z: { derived_expr: { case: [[z_is_homed, pos_z], [true, 9999.99]] } }
    - display_wcs_pos_x: { derived_expr: { case: [[x_is_homed, [sub, pos_x, [case, [[[==, wcs_name, "G54"], wcs54_x_zero], [true, wcs55_x_zero]]]]], [true, 9999.99]] } }
    - display_wcs_pos_y: { derived_expr: { case: [[y_is_homed, [sub, pos_y, [case, [[[==, wcs_name, "G54"], wcs54_y_zero], [true, wcs55_y_zero]]]]], [true, 9999.99]] } }
    - display_wcs_pos_z: { derived_expr: { case: [[z_is_homed, [sub, pos_z, [case, [[[==, wcs_name, "G54"], wcs54_z_zero], [true, wcs55_z_zero]]]]], [true, 9999.99]] } }

    # -- Derived Delta Position / Distance To Go (Simulated) --
    - delta_pos_x:
        derived_expr:
          case:
            - [program_running, [add, 0.55, [mul, 0.45, [sin, [mul, time, 7.3]]]]]
            - [true, 0.0]
    - delta_pos_y:
        derived_expr:
          case:
            - [program_running, [add, 0.55, [mul, 0.45, [sin, [mul, time, 8.1]]]]]
            - [true, 0.0]
    - delta_pos_z:
        derived_expr:
          case:
            - [program_running, [add, 0.55, [mul, 0.45, [sin, [mul, time, 6.5]]]]]
            - [true, 0.0]

  actions:
    # -- Machine Control --
    - home_machine:
        set: { machine_mode: "HOMING", homing_axis_x: true, homing_axis_y: true, homing_axis_z: true, x_is_homed: false, y_is_homed: false, z_is_homed: false }
    - home_machine_x:
        set: { machine_mode: "HOMING", homing_axis_x: true, x_is_homed: false }
    - home_machine_y:
        set: { machine_mode: "HOMING", homing_axis_y: true, y_is_homed: false }
    - home_machine_z:
        set: { machine_mode: "HOMING", homing_axis_z: true, z_is_homed: false }
    - feed_hold:
        toggle: program_paused
    - program_run:
        when:
          condition: [and, x_is_homed, y_is_homed, z_is_homed]
          then:
            - set: { machine_mode: "AUTO", program_running: true, spindle_on: true, coolant_on: true, program_elapsed_time: 0.0, program_paused: false }
    - program_stop:
        set: { machine_mode: "IDLE", program_running: false, spindle_on: false, coolant_on: false, program_paused: false }
    - cycle_wcs:
        cycle: { wcs_name: ["G54", "G55"] }
    - cycle_step_xy:
        cycle: { jog_step_xy: [0.01, 0.1, 1.0, 5.0, 10.0] }
    - cycle_step_z:
        cycle: { jog_step_z: [0.01, 0.1, 1.0, 5.0] }
    - zero_wcs_x:
        - when: { condition: [==, wcs_name, "G54"], then: { set: { wcs54_x_zero: pos_x } } }
        - when: { condition: [==, wcs_name, "G55"], then: { set: { wcs55_x_zero: pos_x } } }
    - zero_wcs_y:
        - when: { condition: [==, wcs_name, "G54"], then: { set: { wcs54_y_zero: pos_y } } }
        - when: { condition: [==, wcs_name, "G55"], then: { set: { wcs55_y_zero: pos_y } } }
    - zero_wcs_z:
        - when: { condition: [==, wcs_name, "G54"], then: { set: { wcs54_z_zero: pos_z } } }
        - when: { condition: [==, wcs_name, "G55"], then: { set: { wcs55_z_zero: pos_z } } }

  updates:
    # -- Homing Sequence --
    - when:
        condition: [==, machine_mode, "HOMING"]
        then:
          # Step 1: Home Z axis if requested and not already done
          - when:
              condition: [and, homing_axis_z, !z_is_homed]
              then:
                - dec: { pos_z: 2.5 } # Move towards zero
                - when:
                    condition: [<=, pos_z, 0]
                    then:
                      - set: { pos_z: 0, z_is_homed: true }
          # Step 2: Home X and Y axes if requested, but only after Z is done
          - when:
              condition: [and, [or, homing_axis_x, homing_axis_y], z_is_homed]
              then:
                - when:
                    condition: [and, homing_axis_x, !x_is_homed]
                    then:
                      - dec: { pos_x: 2.5 }
                      - when: { condition: [<=, pos_x, 0], then: { set: { pos_x: 0, x_is_homed: true } } }
                - when:
                    condition: [and, homing_axis_y, !y_is_homed]
                    then:
                      - dec: { pos_y: 2.5 }
                      - when: { condition: [<=, pos_y, 0], then: {set: { pos_y: 0, y_is_homed: true }} }
          # Step 3: Finish Homing Cycle when all requested axes are done
          - when:
              condition: [and, [==, homing_axis_x, x_is_homed], [==, homing_axis_y, y_is_homed], [==, homing_axis_z, z_is_homed]]
              then:
                - set: { machine_mode: "IDLE", homing_axis_x: false, homing_axis_y: false, homing_axis_z: false }

    # -- Program Execution and Movement --
    - when:
        condition: [and, program_running, !program_paused]
        then:
          # 1. Update program time
          - inc: { program_elapsed_time: 0.033 }
          # 2. Simulate machine movement
          - set: { pos_x: [add, 200, [mul, 50, [cos, [mul, program_elapsed_time, 0.5]]]] }
          - set: { pos_y: [add, 150, [mul, 50, [sin, [mul, program_elapsed_time, 0.5]]]] }
          - range: { pos_z: [10, 20, 0.2] }
          # 3. Simulate spindle RPM
          - set:
              spindle_rpm:
                case:
                  - [spindle_on, [add, 8000, [mul, 200, [sin, [mul, time, 10]]]]]
                  - [true, 0]
    # -- Program Completion --
    - when:
        condition: [>=, program_progress, 100]
        then:
          - set: { machine_mode: "IDLE", program_running: false, spindle_on: false, coolant_on: false }

    # -- Homing Sequence --
    - when:
        condition: [==, machine_mode, "HOMING"]
        then:
          - when: # Step 1: Home Z axis
              condition: [==, homing_step, 1]
              then:
                - dec: { pos_z: 2.5 } # Move towards zero
                - when:
                    condition: [<=, pos_z, 0]
                    then:
                      - set: { pos_z: 0, z_is_homed: true, homing_step: 2 }
          - when: # Step 2: Home X and Y axes
              condition: [==, homing_step, 2]
              then:
                - dec: { pos_x: 2.5 }
                - dec: { pos_y: 2.5 }
                - when:
                    condition: [and, [<=, pos_x, 0], [<=, pos_y, 0]]
                    then:
                      - set: { pos_x: 0, pos_y: 0, x_is_homed: true, y_is_homed: true, homing_step: 3 }
          - when: # Step 3: Finish Homing
              condition: [==, homing_step, 3]
              then:
                - set: { machine_mode: "IDLE", homing_step: 0 }

    # -- Program Execution and Movement --
    - when:
        condition: [and, program_running, !program_paused]
        then:
          # 1. Update program time
          - inc: { program_elapsed_time: 0.033 }
          # 2. Simulate machine movement
          - set: { pos_x: [add, 200, [mul, 50, [cos, [mul, program_elapsed_time, 0.5]]]] }
          - set: { pos_y: [add, 150, [mul, 50, [sin, [mul, program_elapsed_time, 0.5]]]] }
          - range: { pos_z: [10, 20, 0.2] }
          # 3. Simulate spindle RPM
          - set:
              spindle_rpm:
                case:
                  - [spindle_on, [add, 8000, [mul, 200, [sin, [mul, time, 10]]]]]
                  - [true, 0]
    # -- Program Completion --
    - when:
        condition: [>=, program_progress, 100]
        then:
          - set: { program_running: false, spindle_on: false, coolant_on: false }

# Styles
- type: style
  id: '@debug'
  outline_width: 1
  outline_color: '#ffeeff'
  outline_opa: 150
  border_width: 1
  border_color: '#ffeeff'
  border_opa: 150
  radius: 0

- type: style
  id: '@container'
  pad_all: 0
  margin_all: 0
  border_width: 0
  pad_row: 3
  pad_column: 5
  bg_color: '#222222'
  text_color: '#ebebcb'
  radius: 0

- type: style
  id: '@container_transp'
  pad_all: 0
  margin_all: 0
  border_width: 0
  pad_row: 3
  pad_column: 5
  bg_color: '#222222'
  text_color: '#ebebcb'
  radius: 0
  bg_opa: 0

- type: style
  id: '@bar_indicator'
  radius: 4

- type: style
  id: '@bg_gradient'
  bg_opa: 255
  bg_color: '#222222'
  bg_grad_color: '#444444'
  #bg_main_stop: 20
  #bg_grad_stop: 235
  #bg_grad_opa: 255
  #bg_main_opa: 255
  bg_grad_dir: LV_GRAD_DIR_HOR

- type: style
  id: '@flex_x'
  layout: LV_LAYOUT_FLEX
  flex_flow: LV_FLEX_FLOW_ROW

- type: style
  id: '@flex_y'
  layout: LV_LAYOUT_FLEX
  flex_flow: LV_FLEX_FLOW_COLUMN

- type: style
  id: '@indicator_green'
  text_color: '#44ee44'

- type: style
  id: '@indicator_yellow'
  text_color: '#ffff55'

- type: style
  id: '@jog_btn'
  pad_all: 5
  pad_bottom: 10
  pad_top: 10
  margin_all: 0
  radius: 2

- type: style
  id: '@border_top_btn'
  border_width: 1
  border_color: '#ffffff'
  border_opa: 50
  border_side: LV_BORDER_SIDE_TOP_BOTTOM

- type: style
  id: '@border_right'
  border_width: 1
  border_color: '#ffffff'
  border_opa: 50
  border_side: LV_BORDER_SIDE_RIGHT

- type: style
  id: '@indicator_light'
  border_width: 6
  #margin_top: 10
  #margin_bottom: 10
  pad_left: 12
  margin_left: 5
  border_opa: 200
  border_side: LV_BORDER_SIDE_LEFT

- type: style
  id: '@indicator_light_red'
  border_color: '#ff5555'

- type: style
  id: '@indicator_light_green'
  border_color: '#55ff55'

- type: style
  id: '@indicator_light_yellow'
  border_color: '#ffff55'

- type: style
  id: @debug
  bg_color: '#f000f0'
  bg_opa: LV_OPA_COVER

- type: style
  id: @btn_clicked
  bg_color: '#777777'
  bg_opa: 60

- type: style
  id: @bg_group
  bg_opa: 40
  bg_color: '#111111'

- type: style
  id: @tick_color
  line_color: '#777777'

- init: { lv_screen_active: [] }
  add_style: [@container, 0]

- type: component
  id: '@axis_pos_display2'
  content:
    add_style: ['@flex_y', 0]
    add_style: ['@container_transp', 0]
    add_style: ['@bg_group', 0]
    size: [100%, LV_SIZE_CONTENT]
    pad_all: 10
    pad_bottom: 18
    #border_width: 1
    border_color: '#ffffff'
    border_opa: 40
    margin_all: 2
    name: $name
    children:
      -
        add_style: ['@flex_x', 0]
        add_style: ['@container_transp', 0]
        size: [100%, LV_SIZE_CONTENT]
        children:
          - type: button
            # text_font: '@font_kode_30'
            width: LV_SIZE_CONTENT
            add_style: ['@indicator_light', 0]
            add_style: ['@btn_clicked', LV_STATE_PRESSED]
            observes: { $homed_state: { style: { true: '@indicator_light_green', false: '@indicator_light_red' } } }
            action: { $home_action: trigger }
            radius: 0
            bg_opa: 0
            shadow_opa: 0
            children:
              - type: label
                text: $axis
                center: []

          - type: 'label'
            # text_font: '@font_kode_30'
            text: $wcs_pos
            observes: { $wcs_state: { text: '%4.2f' } }
            flex_grow: 1
            add_style: ['@indicator_green', 0]
            text_align: LV_TEXT_ALIGN_RIGHT
      -
        add_style: ['@flex_x', 0]
        add_style: ['@container_transp', 0]
        size: [100%, LV_SIZE_CONTENT]
        children:
          - type: 'label'
            # text_font: '@font_kode_14'
            text: $abs_pos
            observes: { $pos_state: { text: '%4.2f' } }
            flex_grow: 1
            flex_grow: 1
            text_align: LV_TEXT_ALIGN_RIGHT
            add_style: ['@indicator_yellow', 0]
          - type: 'label'
            # text_font: '@font_montserrat_14'
            text: "\uF124"
            width: 14
          - type: 'label'
            # text_font: '@font_kode_14'


            text: $delta_pos
            observes: { $delta_pos_state: { text: '%4.2f' } }
            flex_grow: 1
            text_align: LV_TEXT_ALIGN_RIGHT
            add_style: ['@indicator_yellow', 0]
            flex_grow: 1
          - type: 'label'
            # text_font: '@font_montserrat_14'
            text: "\uF051"
            width: 14

# Jog View
- type: component
  id: '@jog_view'
  content:
    layout: LV_LAYOUT_FLEX
    flex_flow: LV_FLEX_FLOW_ROW
    flex_align: [LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER]
    add_style: ['@container', 0]
    size: [99%, 100%]
    border_width: 0
    pad_all: 0
    margin_all: 0
    outline_width: 0
    name: main
    children:
      - layout: LV_LAYOUT_FLEX
        flex_flow: LV_FLEX_FLOW_COLUMN
        add_style: ['@container', 0]
        height: 100%
        flex_grow: 4
        border_side: LV_BORDER_SIDE_RIGHT
        border_width: 1
        radius: 0
        border_color: '#333333'
        border_opa: 255
        #bg_opa: 0
        children:
          - type: use-view
            id: '@xyz_axis_pos_display'

      # Right main column (Feeds & Speeds)
      - layout: LV_LAYOUT_FLEX
        flex_flow: LV_FLEX_FLOW_COLUMN
        add_style: ['@container', 0]
        add_style: [@bg_gradient, 0]
        height: 100%
        flex_grow: 4
        pad_top: 5
        margin_left: 2
        margin_right: 2
        children:
          - type: use-view
            id: '@feed_rate_scale'
            context:
              unit: MM/MIN
              label: FEED
              letter: F
              ovr: Feed Ovr
              pad_bottom: 12
          - type: use-view
            id: '@feed_rate_scale'
            context:
              unit: /MIN
              label: SPEED
              letter: S
              ovr: Speed Ovr
              pad_bottom: 12
          - type: use-view
            id: '@jog_feed'
            context:
              unit: MM
              label: JOG
              ovr: Jog Ovr
              pad_bottom: 0

# XYZ position display
- type: component
  id: '@xyz_axis_pos_display'
  content:
    size: [100%, 100%]
    add_style: [@container, 0]
    add_style: [@flex_y, 0]
    add_style: [@bg_gradient, 0]
    bg_opa: 255
    children:
      - type: use-view
        id: @axis_pos_display2
        context:
          axis: X
          abs_pos: "000.000"
          wcs_pos: "000.000 G54"
          delta_pos: "000.000   "
          homed_state: x_is_homed
          home_action: home_machine
          wcs_state: wcs_pos_x
          pos_state: pos_x
          delta_pos_state: delta_pos_x

      - type: use-view
        id: @axis_pos_display2
        context:
          axis: Y
          abs_pos: "000.000"
          wcs_pos: "000.000 G54"
          delta_pos: "000.000   "
          homed_state: y_is_homed
          home_action: home_machine
          wcs_state: wcs_pos_y
          pos_state: pos_y
          delta_pos_state: delta_pos_y

      - type: use-view
        id: @axis_pos_display2
        context:
          axis: Z
          abs_pos: "000.000"
          wcs_pos: "000.000 G54"
          delta_pos: "000.000   "
          homed_state: z_is_homed
          home_action: home_machine
          wcs_state: wcs_pos_z
          pos_state: pos_z
          delta_pos_state: delta_pos_z


      - type: label
        observes: { machine_mode: { text: "MODE: %s" } }


- type: component
  id: '@feed_rate_scale'
  content:
    size: [100%, 100%]
    add_style: ['@container_transp', 0]
    add_style: ['@bg_group', 0]
    layout: LV_LAYOUT_FLEX
    flex_flow: LV_FLEX_FLOW_ROW
    height: LV_SIZE_CONTENT
    pad_column: 0
    pad_bottom: $pad_bottom
    pad_top: $pad_bottom
    children:
      # Left Column
      - layout: LV_LAYOUT_FLEX
        add_style: ['@container_transp', 0]
        flex_flow: LV_FLEX_FLOW_COLUMN
        width: 100%
        height: LV_SIZE_CONTENT
        flex_grow: 1
        children:
          - type: label
            text: $label
            height: LV_SIZE_CONTENT
            width: 100%
            # text_font: '@font_kode_20'
            add_style: ['@border_top_btn', 0]
          - type: obj # grid
            #layout: LV_LAYOUT_GRID
            grid_dsc_array: [[LV_GRID_CONTENT, LV_GRID_FR1, LV_GRID_TEMPLATE_LAST], [LV_GRID_CONTENT, LV_GRID_TEMPLATE_LAST]]
            add_style: ['@container_transp', 0]
            width: 100%
            height: LV_SIZE_CONTENT
            children:
              - type: label
                text: $letter
                # text_font: '@font_kode_30'
                grid_cell: [LV_GRID_ALIGN_STRETCH, 0, 1, LV_GRID_ALIGN_CENTER, 0, 1]
                height: LV_SIZE_CONTENT
                pad_left: 10
              - type: label
                bg_opa: 100
                bg_color: '#ff0000'
                grid_cell: [LV_GRID_ALIGN_END, 1, 1, LV_GRID_ALIGN_END, 0, 1]
                # text_font: '@font_kode_30'
                height: LV_SIZE_CONTENT
                text: '1000'
                pad_right: 10
          - layout: LV_LAYOUT_FLEX
            flex_flow: LV_FLEX_FLOW_COLUMN
            add_style: ['@container_transp', 0]
            width: 100%
            height: LV_SIZE_CONTENT
            children:
              - type: bar
                width: 100%
                height: 15
                margin_left: 15
                margin_right: 15
                add_style: ['@bar_indicator', LV_PART_MAIN]
                add_style: ['@bar_indicator', LV_PART_INDICATOR]
                add_style: ['@bar_indicator', LV_PART_INDICATOR]
                value: [65, 0]
                bg_color: '#5dd555'
                bg_opa: 255
              - type: scale
                width: 100%
                height: 18
                margin_left: 15
                margin_right: 15
                margin_bottom: 2
                add_style: [@tick_color, LV_PART_ITEMS]
                add_style: [@tick_color, LV_PART_MAIN]
                add_style: [@tick_color, LV_PART_INDICATOR]
                # text_font: '@font_montserrat_12'

      # Right column
      - layout: LV_LAYOUT_FLEX
        add_style: ['@container_transp', 0]
        flex_flow: LV_FLEX_FLOW_COLUMN
        width: LV_SIZE_CONTENT
        height: LV_SIZE_CONTENT
        pad_right: 0
        flex_align: [LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_SPACE_AROUND, LV_FLEX_ALIGN_CENTER]
        children:
          - type: label
            text: $unit
            # text_font: '@font_kode_20'
            add_style: ['@border_top_btn', 0]
          - type: label
            text: $ovr
          - type: label
            text: 100%%
          # - type: label
            text: 65%%

- type: component
  id: '@jog_feed'
  content:
    size: [100%, 100%]
    add_style: ['@container_transp', 0]
    add_style: ['@bg_group', 0]
    layout: LV_LAYOUT_FLEX
    flex_flow: LV_FLEX_FLOW_ROW
    height: LV_SIZE_CONTENT
    pad_column: 0
    pad_bottom: $pad_bottom
    pad_top: $pad_bottom
    children:
      # Left Column
      - layout: LV_LAYOUT_FLEX
        add_style: ['@container_transp', 0]
        flex_flow: LV_FLEX_FLOW_COLUMN
        width: 100%
        height: LV_SIZE_CONTENT
        flex_grow: 1
        children:
          - type: label
            text: $label
            height: LV_SIZE_CONTENT
            width: 100%
            # text_font: '@font_kode_20'
            add_style: ['@border_top_btn', 0]
          - type: obj # grid
            layout: LV_LAYOUT_GRID
            grid_dsc_array: [[35, 45, 20 , 40, LV_GRID_TEMPLATE_LAST], [LV_GRID_CONTENT, LV_GRID_TEMPLATE_LAST]]
            add_style: ['@container_transp', 0]
            width: 100%
            height: LV_SIZE_CONTENT
            pad_left: 10
            children:
              - type: label
                text: 'XY'
                # text_font: '@font_kode_24'
                grid_cell: [LV_GRID_ALIGN_START, 0, 1, LV_GRID_ALIGN_START, 0, 1]
                height: LV_SIZE_CONTENT
                add_flag: LV_OBJ_FLAG_CLICKABLE
                action: { cycle_step_xy: trigger }
              - type: label
                grid_cell: [LV_GRID_ALIGN_START, 1, 1, LV_GRID_ALIGN_START, 0, 1]
                # text_font: '@font_kode_24'
                height: LV_SIZE_CONTENT
                text: '10'
                pad_right: 10
                add_style: ['@border_right', 0]
                add_style: ['@indicator_yellow', 0]
                add_flag: LV_OBJ_FLAG_CLICKABLE
                action: { cycle_step_xy: trigger }
                observes: { jog_step_xy: { text: '%g' } }
              - type: label
                text: Z
                # text_font: '@font_kode_24'
                grid_cell: [LV_GRID_ALIGN_START, 2, 1, LV_GRID_ALIGN_START, 0, 1]
                height: LV_SIZE_CONTENT
                add_flag: LV_OBJ_FLAG_CLICKABLE
                action: { cycle_step_z: trigger }
              - type: label
                grid_cell: [LV_GRID_ALIGN_START, 3, 1, LV_GRID_ALIGN_START, 0, 1]
                # text_font: '@font_kode_24'
                height: LV_SIZE_CONTENT
                text: ' 5'
                add_style: ['@indicator_yellow', 0]
                add_flag: LV_OBJ_FLAG_CLICKABLE
                action: { cycle_step_z: trigger }
                observes: { jog_step_z: { text: '%g' } }

      # Right column
      - layout: LV_LAYOUT_FLEX
        add_style: ['@container_transp', 0]
        flex_flow: LV_FLEX_FLOW_COLUMN
        width: LV_SIZE_CONTENT
        height: LV_SIZE_CONTENT
        pad_right: 0
        children:
          - type: label
            text: $unit
            # text_font: '@font_kode_20'
            add_style: ['@border_top_btn', 0]
          - type: label
            text: $ovr
          - type: label
            text: 100%%

####################
## Main UI Layout ##
####################

- type: tileview
  add_style: ['@container', 0]
  size: [100%, 100%]
  pad_row: 0
  pad_column: 0
  children:
    - init: { lv_tileview_add_tile: [0, 0, LV_DIR_RIGHT] }
    - init: { lv_tileview_add_tile: [0, 0, LV_DIR_LEFT] }
      add_style: ['@container', 0]
      children:
        - type: use-view
          id: '@jog_view'