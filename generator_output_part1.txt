Warning: Property 'pad_row' for object type 'tileview' (C var 'tileview_0') not found in API spec. Skipping.
Warning: Property 'pad_column' for object type 'tileview' (C var 'tileview_0') not found in API spec. Skipping.
Error: 'with' block missing 'do' object or 'do' is not an object.
Warning: Property 'min_width' for object type 'obj' (C var 'with_target_1') not found in API spec. Skipping.
Warning: Property 'min_width' for object type 'obj' (C var 'with_target_2') not found in API spec. Skipping.
// Code generated by LVGL UI Generator

#include "lvgl.h"

// Forward declaration for any registered C pointers you might have from your application.
// Example: extern const lv_font_t my_custom_font;
void create_ui(lv_obj_t* parent) {
    {
        lv_style_t* debug = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (debug != NULL) {
            memset(debug, 0, sizeof(lv_style_t));
            lv_style_init(debug);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "debug", "lv_style_t");
        }
        lv_style_set_outline_width(debug, 1);
        lv_style_set_outline_color(debug, lv_color_hex(0xFFEEFF));
        lv_style_set_outline_opa(debug, 150);
        lv_style_set_border_width(debug, 1);
        lv_style_set_border_color(debug, lv_color_hex(0xFFEEFF));
        lv_style_set_border_opa(debug, 150);
        lv_style_set_radius(debug, 0);
    }
    {
        lv_style_t* container = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (container != NULL) {
            memset(container, 0, sizeof(lv_style_t));
            lv_style_init(container);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "container", "lv_style_t");
        }
        lv_style_set_pad_all(container, 0);
        lv_style_set_margin_all(container, 0);
        lv_style_set_border_width(container, 0);
        lv_style_set_pad_row(container, 3);
        lv_style_set_pad_column(container, 5);
    }
    {
        lv_style_t* bar_indicator = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (bar_indicator != NULL) {
            memset(bar_indicator, 0, sizeof(lv_style_t));
            lv_style_init(bar_indicator);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "bar_indicator", "lv_style_t");
        }
        lv_style_set_radius(bar_indicator, 4);
    }
    {
        lv_style_t* bg_gradient = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (bg_gradient != NULL) {
            memset(bg_gradient, 0, sizeof(lv_style_t));
            lv_style_init(bg_gradient);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "bg_gradient", "lv_style_t");
        }
        lv_style_set_bg_opa(bg_gradient, 255);
        lv_style_set_bg_color(bg_gradient, lv_color_hex(0x222222));
        lv_style_set_bg_grad_color(bg_gradient, lv_color_hex(0x444444));
        lv_style_set_bg_grad_dir(bg_gradient, LV_GRAD_DIR_HOR);
    }
    {
        lv_style_t* flex_x = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (flex_x != NULL) {
            memset(flex_x, 0, sizeof(lv_style_t));
            lv_style_init(flex_x);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "flex_x", "lv_style_t");
        }
        lv_style_set_layout(flex_x, LV_LAYOUT_FLEX);
        lv_style_set_flex_flow(flex_x, LV_FLEX_FLOW_ROW);
    }
    {
        lv_style_t* flex_y = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (flex_y != NULL) {
            memset(flex_y, 0, sizeof(lv_style_t));
            lv_style_init(flex_y);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "flex_y", "lv_style_t");
        }
        lv_style_set_layout(flex_y, LV_LAYOUT_FLEX);
        lv_style_set_flex_flow(flex_y, LV_FLEX_FLOW_COLUMN);
    }
    {
        lv_style_t* indicator_green = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (indicator_green != NULL) {
            memset(indicator_green, 0, sizeof(lv_style_t));
            lv_style_init(indicator_green);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "indicator_green", "lv_style_t");
        }
        lv_style_set_text_color(indicator_green, lv_color_hex(0x44EE44));
    }
    {
        lv_style_t* indicator_yellow = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (indicator_yellow != NULL) {
            memset(indicator_yellow, 0, sizeof(lv_style_t));
            lv_style_init(indicator_yellow);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "indicator_yellow", "lv_style_t");
        }
        lv_style_set_text_color(indicator_yellow, lv_color_hex(0xFFFF55));
    }
    {
        lv_style_t* jog_btn = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (jog_btn != NULL) {
            memset(jog_btn, 0, sizeof(lv_style_t));
            lv_style_init(jog_btn);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "jog_btn", "lv_style_t");
        }
        lv_style_set_pad_all(jog_btn, 5);
        lv_style_set_pad_bottom(jog_btn, 10);
        lv_style_set_pad_top(jog_btn, 10);
        lv_style_set_margin_all(jog_btn, 0);
        lv_style_set_radius(jog_btn, 2);
    }
    {
        lv_style_t* border_top_btm = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (border_top_btm != NULL) {
            memset(border_top_btm, 0, sizeof(lv_style_t));
            lv_style_init(border_top_btm);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "border_top_btm", "lv_style_t");
        }
        lv_style_set_border_width(border_top_btm, 1);
        lv_style_set_border_color(border_top_btm, lv_color_hex(0xFFFFFF));
        lv_style_set_border_opa(border_top_btm, 50);
        lv_style_set_border_side(border_top_btm, "LV_BORDER_SIDE_TOP_BOTTOM");
    }
    {
        lv_style_t* border_right = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (border_right != NULL) {
            memset(border_right, 0, sizeof(lv_style_t));
            lv_style_init(border_right);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "border_right", "lv_style_t");
        }
        lv_style_set_border_width(border_right, 1);
        lv_style_set_border_color(border_right, lv_color_hex(0xFFFFFF));
        lv_style_set_border_opa(border_right, 50);
        lv_style_set_border_side(border_right, LV_BORDER_SIDE_RIGHT);
    }
    {
        lv_style_t* indicator_light = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (indicator_light != NULL) {
            memset(indicator_light, 0, sizeof(lv_style_t));
            lv_style_init(indicator_light);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "indicator_light", "lv_style_t");
        }
        lv_style_set_border_width(indicator_light, 6);
        lv_style_set_pad_left(indicator_light, 10);
        lv_style_set_margin_left(indicator_light, 10);
        lv_style_set_border_opa(indicator_light, 200);
        lv_style_set_border_side(indicator_light, LV_BORDER_SIDE_LEFT);
    }
    {
        lv_style_t* action_button = (lv_style_t*)malloc(sizeof(lv_style_t));
        if (action_button != NULL) {
            memset(action_button, 0, sizeof(lv_style_t));
            lv_style_init(action_button);
        } else {
            fprintf(stderr, "Error: Failed to malloc for object %s of type %s\n", "action_button", "lv_style_t");
        }
        lv_style_set_size(action_button, {45, 45});
        lv_style_set_bg_color(action_button, lv_color_hex(0x1F95F6));
        lv_style_set_radius(action_button, LV_RADIUS_CIRCLE);
    }
    {
        lv_obj_t* tileview_0 = lv_tileview_create(parent);
        lv_obj_add_style(tileview_0, {container, 0});
        lv_obj_set_size(tileview_0, {lv_pct(100), lv_pct(100)});
    }
    {
        {
            lv_obj_t* nav_action_button = lv_dropdown_create(parent);
            lv_obj_add_style(nav_action_button, {action_button, 0});
            lv_dropdown_set_options(nav_action_button, "\xef\x84\xa4 Jog\n\xef\x80\x99 Probe\n\xef\x81\xb4 Status\n\xef\x81\xb9 X\n\xef\x81\xb9 y\n\xef\x81\xb9 Z\n\xef\x81\xb9 Off");
            lv_obj_align(nav_action_button, LV_ALIGN_BOTTOM_LEFT, 20, -10);
            lv_obj_add_flag(nav_action_button, LV_OBJ_FLAG_FLOATING);
            lv_dropdown_set_text(nav_action_button, "\xef\x83\x89");
            lv_dropdown_set_symbol(nav_action_button, 0);
            lv_obj_move_foreground(nav_action_button);
            lv_obj_t* with_target_1 = lv_dropdown_get_list();
        }
    }
    {
        {
            lv_obj_t* jog_action_button = lv_dropdown_create(parent);
            lv_dropdown_set_options(jog_action_button, "\xef\x80\x95 Home\n\xef\x80\xa1 Zero\n\xef\x81\xb4 G54\n\xef\x81\xb4 G55\n\xef\x81\xb4 G56\n\xef\x81\xb4 G57\n\xef\x81\xb4 G58");
            lv_obj_add_style(jog_action_button, {action_button, 0});
            lv_obj_align(jog_action_button, LV_ALIGN_BOTTOM_LEFT, 90, -10);
            lv_obj_add_flag(jog_action_button, LV_OBJ_FLAG_FLOATING);
            lv_dropdown_set_text(jog_action_button, "\xef\x81\xb9");
            lv_dropdown_set_symbol(jog_action_button, 0);
            lv_obj_move_foreground(jog_action_button);
            lv_obj_t* with_target_2 = lv_dropdown_get_list();
        }
    }
}
